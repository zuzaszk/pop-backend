<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.pop.backend.mapper.EvaluationsMapper">

    <select id="getEvaluationsByProjectId" resultMap="EvaluationBaseResultMap">
        SELECT
            evaluation_id, project_id, score, comment, state, is_public, created_at
        FROM evaluations
        WHERE project_id = #{projectId}
    </select>

    <select id="getExistingScore" resultMap="EvaluationBaseResultMap">
        SELECT
            *
        FROM evaluations
        WHERE project_id = #{projectId} AND user_id = #{userId} AND role_id = #{roleId} AND score IS NOT NULL LIMIT 1
    </select>


    <select id="hasUserAlreadyEvaluated" resultMap="EvaluationBaseResultMap">
        SELECT
            *
        FROM evaluations
        WHERE project_id = #{projectId} AND user_id = #{userId} LIMIT 1
    </select>

    <select id="countEvaluatedProjectsByUser" resultType="int">
        SELECT COUNT(*)
        FROM evaluations
        WHERE user_id = #{userId}
        AND score IS NOT NULL
    </select>

    <select id="countNotEvaluatedProjectsByUser" resultType="int">
        SELECT COUNT(*)
        FROM evaluations
        WHERE user_id = #{userId}
        AND score IS NULL
        <!-- SELECT COUNT(*)
        FROM projects p
        LEFT JOIN evaluations e ON p.project_id = e.project_id AND e.user_id = #{userId}
        WHERE e.evaluation_id IS NOT NULL AND e.score IS NULL -->
    </select>

    <select id="averageScoreByUser" resultType="double">
        SELECT AVG(score)
        FROM evaluations
        WHERE user_id = #{userId}
        AND score IS NOT NULL
    </select>

    <select id="scoreDistributionByUser" resultType="map">
        SELECT
            CASE
                WHEN score = 0 THEN '0.0'
                WHEN score = 1 THEN '1.0'
                when score = 1.5 THEN '1.5'
                WHEN score = 2 THEN '2.0'
                WhEN score = 2.5 THEN '2.5'
                WHEN score = 3 THEN '3.0'
                WHEN score = 3.5 THEN '3.5'
                WHEN score = 4 THEN '4.0'
                WHEN score = 4.5 THEN '4.5'
                WHEN score = 5 THEN '5.0'
                ELSE 'N/A'
            END AS score,
            COUNT(*) AS count
        FROM evaluations
        WHERE user_id = #{userId}
        GROUP BY score
    </select>

    <select id="averageEvaluationTimeByUser" resultType="double">
        SELECT AVG(EXTRACT(EPOCH FROM (e.updated_at - e.created_at)) / 3600) AS averageHours
        FROM evaluations e
        WHERE e.user_id = #{userId}
        AND e.created_at IS NOT NULL
        AND e.updated_at IS NOT NULL
        GROUP BY e.user_id
    </select>





<!--    <select id="getEvaluationByUserProjectEvaluationRole" resultMap="EvaluationBaseResultMap">-->
<!--        SELECT-->
<!--            evaluation_id,-->
<!--            score,-->
<!--            comment,-->
<!--            state,-->
<!--            is_public,-->
<!--            created_at-->
<!--        FROM evaluations-->
<!--        WHERE project_id = #{projectId}-->
<!--          AND user_id = #{userId}-->
<!--          AND evaluation_role_id = #{evaluationRoleId}-->
<!--    </select>-->

    <select id="getEvaluationByUser" resultMap="EvaluationBaseResultMap">
        SELECT
            *
        FROM evaluations
        WHERE project_id = #{projectId}
          AND user_id = #{userId}
    </select>


    <select id="getEvaluationByUserProjectEvaluationRole" resultMap="EvaluationBaseResultMap">
        SELECT
            *
        FROM evaluations
        WHERE project_id = #{projectId}
          AND user_id = #{userId}
          AND evaluation_role_id = #{evaluationRoleId}
    </select>




    <resultMap id="EvaluationBaseResultMap" type="com.pop.backend.entity.Evaluations">
        <id property="evaluationId" column="evaluation_id"/>
        <result property="score" column="score"/>
        <result property="comment" column="comment"/>
        <result property="state" column="state"/>
        <result property="isPublic" column="is_public"/>
        <result property="createdAt" column="created_at"/>
        <result property="updatedAt" column="updated_at"/>
        <result property="evaluationRoleId" column="evaluation_role_id"/>
    </resultMap>

</mapper>
